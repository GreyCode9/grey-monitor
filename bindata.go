package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _views_index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xc1\x8e\xd3\x40\x0c\x86\xef\xfb\x14\x26\x27\x58\xa9\x71\x17\x01\x42\x69\x52\xad\x04\x48\x1c\x40\xac\x10\x07\x38\xce\x66\x9c\xce\x94\x64\x66\x88\xdd\x64\xcb\x6a\x9f\x80\x33\xcf\xc1\x89\x57\x42\x3c\x06\x4a\x27\xa1\x6c\x81\x0a\x72\xc9\xc4\xfe\xfd\xe5\x97\xed\xc9\xef\x3c\x7d\xf5\xe4\xcd\xbb\x8b\x67\x60\xa4\xa9\x97\x27\xf9\xf4\x22\xa5\x97\x27\x00\x00\x79\x43\xa2\xa0\x34\xaa\x65\x92\x22\xd9\x48\x35\x7b\x9c\x8c\x29\xb1\x52\xd3\x72\xc8\x09\x7f\xfb\xfa\xe9\xfb\x97\xcf\x39\xc6\x58\xcc\x73\xd9\xda\x20\xc0\x6d\x59\x24\x46\x24\x70\x86\x58\x6a\x97\xae\x59\x53\x6d\xbb\x36\x75\x24\xe8\x42\x83\x14\x19\xe7\x0f\xd3\x79\x7a\x86\xda\xb2\x4c\xa1\xb4\xb1\x83\x3e\x59\xe6\x18\x69\xff\x83\x5e\x19\x54\x41\x95\x86\x26\xda\xac\xa7\x4b\xb6\x42\xe7\x8a\xab\xd9\x70\xc0\x8f\x06\x15\x33\x09\x8a\xa1\x86\xb0\xb3\x4e\xd4\x8a\x8e\xfc\x51\xb6\x81\x8a\x44\xe8\x4a\x70\xad\x3a\x15\xa3\x63\x43\x86\xa7\xf4\x8e\x05\x8c\x67\x81\x02\x7a\xeb\xb4\xef\xd3\xda\x97\x4a\xac\x77\xe9\x10\x5e\x1c\x4a\x45\x02\x14\xe0\xa8\x87\xb7\x2f\x5f\x3c\x17\x09\xaf\xe9\xc3\x86\x58\xee\xde\x8b\xd2\xbd\x8f\x1c\xe3\x5c\xf2\x4b\xaf\xb7\xa3\x2d\x6d\x3b\x60\xd9\xd6\x54\x24\xbe\xa3\xb6\xaa\x7d\x9f\x81\xb1\x5a\x93\x5b\x40\xa3\xda\x95\x75\x19\xcc\x41\x6d\xc4\x2f\xa0\xb7\x5a\x4c\x06\x67\xf7\xe7\xf3\x70\xb5\xf8\xc5\xf5\x0e\x63\x75\x91\x94\x61\x73\x41\x6d\x49\x4e\x92\x09\x3b\x16\x3d\xda\xd5\x18\xb2\x2b\x23\x59\xfc\xa8\x6a\xaf\x24\xab\xa9\x92\x05\x0c\xfd\xd2\xb6\xfb\x03\xb2\xa1\xe6\xdf\x91\xf0\x57\xe6\x78\xbc\xbe\xc6\xd3\x5b\x78\x6d\xf9\xfd\x51\xf0\x83\x08\xbe\xdd\x8b\x09\x7d\x8a\x37\x37\xbf\x6f\xd4\x9a\x71\xef\x7a\x58\x06\x38\xb6\x7f\x6b\xc6\x7d\xdb\x0e\xd5\x3f\xfd\x1e\x54\x0c\xb6\x0f\xb4\x3b\x2f\x39\xc6\xe1\xe6\xb8\xbb\x8a\x3f\x02\x00\x00\xff\xff\x55\x41\x82\x3f\xa1\x03\x00\x00")

func views_index_html() ([]byte, error) {
	return bindata_read(
		_views_index_html,
		"views/index.html",
	)
}

var _views_js_cpupercent_js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcd\x6a\xdc\x3a\x14\xde\xfb\x29\x0e\x73\x09\xb6\xc9\xe0\x71\x02\x97\xcc\xd8\xcc\x22\x37\xb7\x8b\x96\xb4\x09\x4c\x4b\x16\x61\x28\x1a\xf9\x8c\xad\xc6\x96\x8c\x24\xdb\x4d\x83\xd7\xdd\x75\xd5\x87\xe8\x4b\x94\xbe\x4c\x21\xaf\x51\xe4\x09\xe3\xf8\x67\x20\xf5\x4a\x3e\xe7\xfb\xce\xf9\xf4\x49\x3a\x25\x91\x40\xf3\xe2\x1a\x25\x45\xae\xff\x17\x19\x2c\x21\x12\xb4\xc8\x90\x6b\x2f\x46\xfd\x2a\x45\xb3\xfc\xef\xfe\x75\xe4\xd8\x2d\xd0\x76\x43\xab\x4b\xbd\x48\x88\xd4\xb0\x04\xa4\x66\xa1\x3c\xc6\x99\x76\x3a\x95\xa7\x76\xc9\xb8\x26\x31\x0e\xc9\x57\xb9\x66\x82\x87\x96\xd5\x0f\xc1\x12\x1e\x2c\x0b\x00\x40\xa1\x64\xa8\x02\xb8\x7d\x68\x7e\xcd\xa7\xef\x73\x0c\xc0\x8e\x49\x11\xa3\x3d\x6d\xc3\x4c\xa7\x18\xb4\xb0\x86\x9d\x88\x2a\x00\x2d\x0b\xdc\x87\xeb\x96\x91\x4b\x11\x4b\x54\x2a\x80\x43\xac\x69\x27\x5e\xb1\x48\x27\x01\x9c\xcc\xc7\x8a\x91\xcf\x4c\x5d\x32\x8e\xfd\x62\x29\xe3\xb8\xd2\xf7\xe9\x20\x31\x5e\xb1\xa9\x7a\xa8\xfe\x7b\x46\xef\xc6\xc5\x6e\x49\xaa\x46\xf7\xa8\xf2\x94\xe9\x51\x5d\xc8\xe3\xa6\xf7\xbf\xd3\xbf\xd6\x7b\x3a\x1d\x64\xa8\x48\x85\x0c\xc0\xfe\x67\xb1\x58\xd8\x2f\xdb\xcd\x25\xd9\x60\xda\xef\x12\x31\xa5\x09\xa7\x18\xc0\x69\x4f\x58\xa7\x43\x37\xb5\x15\x5c\xaf\xd8\x17\x43\xf2\x47\xbb\x71\x9a\x18\xee\xcb\x8e\xd9\xc4\xcf\x37\xa2\xc4\xd1\xe4\xae\x4d\x4f\x1b\xd3\x98\x1d\x34\x6d\x23\x64\x84\xf2\xe6\xe9\xa8\xfd\xc3\xe6\xec\xd7\x11\x6a\xc2\x06\xd6\x94\x24\x2d\xf0\x9c\xb3\x8c\x98\x27\x32\x26\xae\xf5\x61\xee\x77\x33\x62\xbb\x55\xa8\x2f\x90\x6b\x94\x01\xdc\xfa\x53\xb0\xcf\xfc\x23\x7b\xdd\xe7\xcb\x8c\xe8\x06\x62\x3f\x34\xed\xea\x23\xbb\x95\xb5\x13\x5b\xaf\xad\x3a\xb4\x7a\x13\xc0\x33\xa6\x5d\x0a\x12\x31\x1e\x3b\xee\x48\x1a\x9f\x5e\xb6\xd3\x7f\xea\x6e\x68\x59\xb3\x19\x50\xc1\x95\x86\x44\x28\x33\x4c\x2a\xc6\x23\x51\x79\xa9\xa0\xcd\x56\x3d\x13\x1e\x80\x26\x27\xa7\x67\x9e\xef\xf9\xde\x49\x30\x5f\xcc\xe7\x13\x6b\x97\xa5\x79\x71\xb3\x82\x25\x70\xac\xe0\x06\x37\x2b\x41\xef\x50\x3b\x93\x4a\x05\xb3\xd9\xe4\xd8\x70\x8f\x27\xb3\x4a\xcd\x5a\x1d\x2b\xc6\xe3\x14\x27\xae\xd5\x50\x3d\xc1\x33\x54\x8a\xc4\x08\x4b\xd8\x16\x9c\x36\xf3\xc8\xc1\x52\xbb\x4f\xe7\xb1\xeb\x23\x91\x22\x2b\x31\xfa\x98\xa9\xd8\xcc\xbf\x52\x7b\x11\xd1\x24\xb4\x9e\x61\x3e\xa9\x66\x94\xbd\x59\x5d\xbd\xf3\x72\x22\x15\x3a\xcf\x59\x6e\xd8\x40\xdf\x12\x9d\x78\x14\x59\xea\x18\xf8\xad\xbf\x76\x77\x15\x7a\x0e\x26\x2c\xc2\x67\x06\x8f\x41\x5a\x93\xdb\x8b\xb3\x9f\x9f\x9d\x83\x1e\x5e\x52\xa3\xbd\x8f\xda\xa3\x9b\xab\x10\x0c\x85\x4e\x39\xc9\xcc\x28\xbe\xb8\xfe\xf0\xfb\xe7\xaf\xc7\xef\x3f\x1e\xbf\x7d\x75\x8e\x5c\xbb\x1e\x94\x59\x1f\xb8\xf5\xbb\x78\xed\x5a\x75\xf8\x27\x00\x00\xff\xff\x7e\xc3\x6c\x47\x93\x06\x00\x00")

func views_js_cpupercent_js() ([]byte, error) {
	return bindata_read(
		_views_js_cpupercent_js,
		"views/js/cpuPercent.js",
	)
}

var _views_js_disk_js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4f\x6f\xd3\x4a\x10\xbf\xef\xa7\x58\x59\x7a\x5a\x5b\xf5\xb3\xfb\xf4\x5e\xf5\x90\xa3\x70\x68\xa9\xf8\x73\x20\x15\x0d\x12\x52\xd5\xc3\x36\x9e\xd8\x5b\x9c\xdd\x65\x77\x12\x1a\x55\x3e\x20\x04\x9f\x80\x03\x12\xdc\xb8\x20\x8e\x48\x88\x13\xe2\xcb\xd0\xf6\x6b\xa0\xb5\xdd\xd8\x49\x5a\x0a\xab\x48\xd9\x9d\xf9\xfd\x66\x76\xc6\xb3\xbf\x19\x37\x34\x15\xf6\xe9\x1d\x35\xa1\x7d\x9a\xaa\xd1\x74\x02\x12\xa3\x0c\x70\xb7\x00\xb7\xdd\x9e\xdf\x4f\x7d\xe6\x20\x2c\xe8\x91\x4b\xf8\x4e\xce\x0d\xd2\x3e\x85\x91\xdb\xd8\x48\x48\x81\x7e\x13\x27\x64\x33\x21\x91\x67\xd0\x25\x0c\x34\x0a\x25\x7b\x84\xb4\x07\xda\xa7\xa7\x84\x52\x4a\x51\x60\x01\x49\x73\xa8\x0c\x70\x82\x09\x65\x17\x1f\x5e\x5c\xbc\x7b\xfb\xe3\xdb\xf7\x8b\x37\x1f\xcf\x5f\xbe\x3a\x7b\xfd\x85\x85\x0b\x8c\x9d\x1e\x35\xb0\x34\xed\x98\x0b\x18\x3b\xdb\x08\x24\x82\x61\x95\xb9\xac\xbd\xa8\x54\x81\x42\x2f\xe5\x31\x22\xcb\xc0\x24\x94\x09\x84\xc9\x12\xba\x80\x0c\x64\xda\x05\x2b\x23\x40\xba\xd8\x33\x30\x28\x46\xbc\x58\xcf\xea\xfe\x1a\x6b\x13\xc6\x82\x11\x60\x13\x7a\xb0\x80\xb6\x01\xdd\x92\x7c\x02\x09\x65\xd7\xd4\x58\xdd\x71\xae\x1d\x42\x0b\x58\x71\x18\x9e\x8a\xa9\x4d\x28\xdb\xda\xfc\x6b\xc5\x95\x72\xe4\xdd\x9c\x8b\xdc\x33\x5e\x4c\x21\xa1\xff\x6c\xfe\x77\x2b\xbc\xcc\x7d\xf6\xf5\x73\x9d\x9e\x95\xe1\xb5\x8c\xff\xff\xdd\x5a\x10\xce\xdf\x7f\xba\x9a\x70\xb8\x7c\x84\x89\xce\xb9\x15\x36\x59\xa9\xd9\x2d\xd7\xef\x7d\x9c\x2f\x7f\xf6\xee\xb2\x39\x4f\xd5\xf3\xed\x62\x6a\xdc\x75\xd7\x2f\xd6\x62\x06\xe3\xb1\x05\x7c\x92\xd0\x5f\xa2\x76\x54\xa1\xdc\x87\x36\xd9\x11\xf7\x37\x43\xda\xfc\xa2\xad\x80\xad\xb1\x4a\x72\xf5\xa9\xde\x1d\x92\xb2\x19\xe3\xea\x11\x44\x16\xb0\x9e\x67\xbf\x1d\xed\xa0\x47\x48\x1c\xd3\x91\x92\x16\xab\xf1\x7f\x6c\x0a\xda\xa7\x5e\x8e\xa8\x93\x38\xf6\x36\x72\x65\x71\xc3\x8b\xb9\x16\xb1\x73\x7b\x3d\x07\x77\xde\x48\x69\x90\xbe\x77\x77\x77\xe8\x85\x0d\x31\x58\xf8\x2c\xc8\xd4\x6f\x8f\x4a\x1a\xe0\xe9\xdc\x22\x47\xf7\x0e\x65\x06\x7d\x1f\x82\xfe\xed\x53\x87\x70\xab\xce\x7f\x6c\xab\xb7\xf6\x60\x7f\xf0\x30\xd2\xdc\x58\xf0\x2b\xb6\x01\xab\x95\xb4\x30\x84\x13\x0c\xba\x0c\x55\x40\x54\xa8\xcc\x77\xbc\xca\x51\x12\xd2\xa9\xc4\xc2\x0d\xc5\xec\x71\xcc\xbd\x1e\xe9\x54\xb3\x37\xd8\x1f\x7a\x61\x87\x1e\x34\x6e\x0b\xf8\x08\x9e\x4d\xc1\xe2\x3d\xe0\x29\x18\x9f\xed\x28\x89\x20\xf1\xef\xe1\x5c\x03\x0b\x29\xe3\x5a\x17\x62\xc4\x5d\x53\x63\x77\xa1\xae\xa6\xb8\x44\x4e\x44\x34\xc7\x3c\x61\x71\xae\x26\xc0\x4a\x72\x43\x6b\x68\xf5\x5c\x91\x1e\xf7\x97\xba\xd0\xda\xd7\xba\x75\x1c\x90\xd5\xd6\x2c\x51\xd7\xdd\x2e\x46\x84\x0a\x79\x51\xfb\xae\x1a\x96\x8e\x0a\xad\xca\x1f\x5d\x92\xb7\x5a\x05\x13\xca\x36\xaa\xb0\xae\xd8\x76\x22\x3b\x7a\x58\x2b\xcd\xc1\xe9\xba\x12\x5c\x2f\x04\x55\xc4\xa9\x85\xf4\xcf\xd4\xa0\xa2\x8d\x0d\xc0\x6f\x68\x42\x7b\xd7\x7a\x5b\x06\x3d\x52\x92\x76\x9c\xab\x46\x5b\x34\x42\x66\x62\x3c\xf7\x2f\xbf\x6b\x10\xfc\x0c\x00\x00\xff\xff\x22\x2d\x7d\xc7\x9a\x06\x00\x00")

func views_js_disk_js() ([]byte, error) {
	return bindata_read(
		_views_js_disk_js,
		"views/js/disk.js",
	)
}

var _views_js_mempercent_js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcf\x6a\xdb\x4e\x10\xbe\xeb\x29\x06\xff\x08\x2b\x11\x61\xfb\x17\x28\x4d\x24\x7c\x48\xd3\x1e\x0a\x81\x16\x5c\xc8\x21\x98\xb2\x96\xc6\xd2\x12\x69\xd7\xec\x8e\xe5\xba\x46\xc7\xb6\xb7\x9e\x7a\xe8\x23\xf4\xd2\x47\x28\x7d\x99\x86\xbc\x46\x59\xd9\x58\xd1\x1f\x43\xea\xd3\x7a\x66\xbe\xf9\xbe\xf9\x56\x3b\x05\xd7\x90\x63\xfe\x16\x75\x84\x92\x5e\xaa\x1c\x26\x10\xab\x68\x95\xa3\xa4\x61\x82\xf4\x2a\x43\x7b\x7c\xb1\x79\x1d\xbb\xac\x2e\x64\x5e\xe8\x34\xa1\x57\x29\xd7\x04\x13\xc0\xc8\x1e\xcc\x50\x48\x41\x6e\xa3\xb3\xcf\x0a\x21\x89\x27\xd8\x05\xbf\x59\x92\x50\x32\x74\x9c\x76\x08\x26\xb0\x75\x1c\x00\x00\x83\x5a\xa0\x09\xe0\x76\x5b\xfd\xb5\x3f\xda\x2c\x31\x00\x96\xf0\x55\x82\xcc\xaf\xc3\x82\x32\x0c\xea\xb2\x0a\x9d\xaa\x75\x00\xa4\x57\x78\x08\x97\x35\x62\xa9\x55\xa2\xd1\x98\x00\x8e\xa1\xfc\x46\x7c\x2d\x62\x4a\x03\xf8\xff\xbc\xaf\x19\xff\x20\xcc\xb5\x90\xd8\x6e\x96\x09\x89\x53\xda\x64\x9d\x44\x7f\xc7\xaa\xeb\xb1\xfe\xef\x44\x74\xd7\x2f\x76\xc1\x33\xd3\x3b\xa3\x59\x66\x82\x7a\x75\xa1\x4c\x2a\xee\x67\xfe\x3f\xeb\x3d\xf3\x3b\x99\x48\x65\x4a\x07\xc0\xfe\xbb\xb8\xb8\x60\x4f\x9b\xe6\x9a\xcf\x31\x6b\xb3\xc4\xc2\x10\x97\x11\x06\x70\xd6\x12\xd6\x60\x68\xa6\x16\x4a\xd2\x54\x7c\xb4\xa0\x71\x2f\x9b\x8c\x52\x8b\x7d\xda\x35\xdb\xf8\xe5\x5c\x15\xd8\x9b\xdc\xd1\xb4\xb4\x09\xc2\xfc\xa8\x69\x73\xa5\x63\xd4\x37\xfb\xab\x1e\x1f\x37\xe7\x70\x8e\x91\xb8\xe8\x58\x53\xf0\x6c\x85\x97\x52\xe4\xdc\x3e\x91\x3e\x71\xb5\x0f\xe7\xe3\x66\x46\x2d\x16\x06\xe9\x0a\x25\xa1\x0e\xe0\x76\xec\x03\x7b\x3e\x3e\x61\xb3\x36\x5e\xe7\x9c\xaa\x12\xb6\xad\xe8\xca\x13\x56\xcb\xda\x89\x2d\x67\x4e\x19\x3a\xad\x0d\x30\xb4\xa6\x5d\x2b\x1e\x0b\x99\xb8\x5e\x4f\x1a\xf7\x2f\xdb\x6d\x3f\x75\x2f\x74\x9c\x48\x49\x43\x76\x2f\xdc\x4c\x61\x02\x12\xd7\x70\x83\xf3\xa9\x8a\xee\x90\xdc\xc1\xda\x04\xa3\xd1\xe0\x34\x55\x86\x4e\x07\xa3\xb5\x19\xd5\x1d\x06\x9e\x53\x81\x86\x4a\xe6\x68\x0c\x4f\x10\x26\xb0\x58\xc9\xa8\xda\x21\x2e\x16\xe4\xed\x3d\xdc\x31\x68\x8c\x50\x14\x18\xbf\xcf\x4d\x62\x77\x56\x41\xc3\x98\x13\x0f\xab\x92\xb6\xe4\x54\xc4\xf8\x68\xa2\xbe\x92\x7a\xaa\xfa\xa6\x0e\x0b\xab\xe1\x6c\xf7\xab\xb0\xc4\xed\xaa\x43\x75\xe5\x7d\xf0\x58\xae\x2f\x79\x6e\xb7\xde\xfd\xe7\x4f\xf7\x3f\xbf\xff\xf9\xf5\xfb\xe1\xdb\x8f\x87\xaf\x5f\xdc\x13\x8f\x95\x9d\x1e\xb3\x23\xdf\xd8\x2e\x5e\x7a\x4e\x19\xfe\x0d\x00\x00\xff\xff\x26\xcf\xc1\xe8\x01\x06\x00\x00")

func views_js_mempercent_js() ([]byte, error) {
	return bindata_read(
		_views_js_mempercent_js,
		"views/js/memPercent.js",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"views/index.html": views_index_html,
	"views/js/cpuPercent.js": views_js_cpupercent_js,
	"views/js/disk.js": views_js_disk_js,
	"views/js/memPercent.js": views_js_mempercent_js,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"views": &_bintree_t{nil, map[string]*_bintree_t{
		"index.html": &_bintree_t{views_index_html, map[string]*_bintree_t{
		}},
		"js": &_bintree_t{nil, map[string]*_bintree_t{
			"cpuPercent.js": &_bintree_t{views_js_cpupercent_js, map[string]*_bintree_t{
			}},
			"disk.js": &_bintree_t{views_js_disk_js, map[string]*_bintree_t{
			}},
			"memPercent.js": &_bintree_t{views_js_mempercent_js, map[string]*_bintree_t{
			}},
		}},
	}},
}}
