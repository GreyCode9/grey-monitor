package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _views_archive_memandcpupercent_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xdf\x8a\xd4\x30\x14\xc6\xef\xe7\x29\x8e\x85\x05\x15\xa6\xe9\x5e\x2c\x48\xff\xb1\xa0\x82\x17\x8a\x8b\x78\xa1\x97\x99\xe4\xb4\xc9\xd0\x26\xb1\x39\x6d\x1d\xc5\x3b\xc1\x3b\x41\xd8\x87\xf0\x05\xbc\x14\x5f\x46\x18\x1f\x43\xb2\x9d\x3a\xb3\xe3\x22\xee\xb9\x49\xe6\xcb\xc7\xef\x9b\x9c\x9c\xe6\x77\x1e\x3d\x7f\xf8\xf2\xf5\xc5\x63\x50\xd4\x36\xe5\x22\x9f\x17\xe4\xb2\x5c\x00\x00\xe4\x2d\x12\x07\xa1\x78\xe7\x91\x8a\xa8\xa7\x6a\xf9\x20\xda\x1d\x91\xa6\x06\xcb\xed\xe5\xb7\x5f\x1f\xbf\xfc\xfc\xfe\x63\x7b\xf9\x75\xfb\xf9\x53\xce\x26\x79\xb2\x78\xd1\x69\x47\xe0\x3b\x51\x44\x8a\xc8\xf9\x94\x31\x21\x4d\xbc\xf6\x12\x1b\x3d\x74\xb1\x41\x62\xc6\xb5\x0c\x43\x04\xf9\xf3\xb3\x38\x89\x4f\x99\xd4\x9e\x66\x29\x6e\x75\xf0\x47\x65\xce\x26\xda\x6d\xd0\xb5\x62\xdc\x71\xa1\x70\xa6\x2d\x47\x5c\x79\x4d\x78\xce\x7d\xb5\x0c\x1b\xf6\x4e\x31\xee\x3d\x12\x23\x85\x2d\xb2\x41\x1b\xe2\x35\xfe\x23\x91\x36\x0e\x8b\x88\xf0\x2d\xb1\x35\x1f\xf8\xa4\xee\x7a\x12\x4a\x58\xe3\x09\x94\xf5\x04\x05\x8c\xda\x48\x3b\xc6\x8d\x15\x9c\xb4\x35\x71\x90\xb3\x63\x2b\x91\x83\x02\x0c\x8e\xf0\xea\xd9\xd3\x27\x44\xee\x05\xbe\xe9\xd1\xd3\xdd\x7b\x93\xf5\xf8\x7f\xd0\x66\x6e\x70\xa8\xfb\xef\xff\x6c\x43\xb5\xbc\xab\xb5\x49\x21\xc9\xae\xc9\x8e\x4b\xa9\x4d\x7d\x4d\xff\x30\xd3\x27\x60\xce\xa6\x77\xcf\x57\x56\x6e\xca\x45\x2e\xf5\x00\x57\x47\x45\x64\x07\xec\xaa\xc6\x8e\x29\x28\x2d\x25\x9a\x6c\x1f\x03\xbc\x27\x9b\xc1\xa8\x25\xa9\xf4\x34\x49\x4e\x32\x50\xa8\x6b\x45\xbb\x1f\xe0\xac\xd7\xe1\xee\x29\xf0\x95\xb7\x4d\x4f\x98\xcd\x13\x14\x12\xb4\x2c\x22\xe1\xfa\x0b\xec\x04\x1a\x8a\xe6\xc4\x89\x07\x67\xc9\x49\x76\x88\xab\x1a\xcb\x29\x6d\xb0\xa2\x0c\xc2\x03\x49\x3d\x1c\xb1\x5a\x6c\xff\x93\x05\x37\xc2\xe6\xe5\x70\xbe\xe2\x98\xad\x3d\xdb\x93\xc3\x74\xc0\xc1\x78\xdc\x60\xde\x5f\xe9\x2f\x33\xdb\xf5\x97\x5d\x7d\x6d\xbf\x03\x00\x00\xff\xff\x3c\x0b\x74\xf8\x84\x03\x00\x00")

func views_archive_memandcpupercent_html() ([]byte, error) {
	return bindata_read(
		_views_archive_memandcpupercent_html,
		"views/archive/MemAndCpuPercent.html",
	)
}

var _views_index_html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8f\xb1\x4e\xc3\x40\x0c\x86\xf7\x3c\x85\xb9\x1d\x0e\x31\xa1\xd6\x89\x84\x0a\x23\xa2\x03\x0b\xa3\x9b\x73\x7b\x27\x92\xb4\x5c\x7c\x85\xee\x48\x0c\x48\x48\x48\xe5\x1d\xd8\x98\x3a\x22\x5e\x06\x91\x3e\x06\x4a\xee\x3a\xd9\xbf\x3f\xcb\xfa\x8c\x47\x97\x37\x93\xdb\xbb\xe9\x15\x58\xa9\xab\x22\xc3\x43\x61\x32\x45\x06\x00\x80\x35\x0b\x41\x69\xc9\xb7\x2c\xb9\x0a\x32\x3f\x3e\x57\x09\x89\x93\x8a\x8b\x9e\x49\xfb\xb7\x7b\xdd\x7f\x7d\xa0\x8e\xb3\x2c\x43\x1d\x6f\xe0\x6c\x69\x36\x69\xdf\xb8\x75\xec\x86\x44\xd0\xca\xa6\xe2\x5c\x3d\x3a\x23\x76\x04\x67\xa7\xab\xa7\xb1\x65\xb7\xb0\x92\x02\xcc\xa8\xbc\x5f\xf8\x65\x68\xcc\x08\xe8\x21\xd0\x58\x81\xf5\x3c\xcf\x15\xf9\xd2\xba\x35\xeb\x6b\xae\x2f\x1a\x33\x59\x85\x29\xfb\x92\x1b\x39\xe9\xfd\x55\xd1\x6d\x77\xfb\xe7\xf7\xdf\xef\x9f\x6e\xfb\xd9\xbd\xbd\xa0\xa6\x64\xa0\x07\x05\xd4\x51\x0a\xf5\xf0\xee\x7f\x00\x00\x00\xff\xff\x0b\x47\x22\x5f\x05\x01\x00\x00")

func views_index_html() ([]byte, error) {
	return bindata_read(
		_views_index_html,
		"views/index.html",
	)
}

var _views_js_cpupercent_js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcd\x6e\xdb\x38\x10\xbe\xeb\x29\x06\x5e\x04\x92\x10\x43\x56\x82\x5d\xc4\x96\xe0\x43\x36\xbb\x87\x16\x69\x13\xc0\x2d\x72\x08\x8c\x82\xa6\xc6\x12\x1b\x89\x14\x48\x4a\x6a\x1a\xe8\xdc\x5b\x4f\x7d\x88\xbe\x44\xd1\x97\x29\x90\xd7\x28\x28\x07\x56\xf4\x63\x20\xd5\x89\x9a\xf9\xbe\x99\x8f\x1f\xc9\x29\x89\x04\x9a\x17\xd7\x28\x29\x72\xfd\x9f\xc8\x60\x09\x91\xa0\x45\x86\x5c\x7b\x31\xea\xff\x53\x34\xcb\x7f\xef\x5f\x45\x8e\xdd\x02\x6d\x37\xb4\xba\xd4\x8b\x84\x48\x0d\x4b\x40\x6a\x16\xca\x63\x9c\x69\xa7\x53\x79\x6a\x97\x8c\x6b\x12\xe3\x90\x7c\x95\x6b\x26\x78\x68\x59\xfd\x10\x2c\xe1\xc1\xb2\x00\x00\x14\x4a\x86\x2a\x80\xdb\x87\xe6\xd7\x7c\xfa\x3e\xc7\x00\xec\x98\x14\x31\xda\xd3\x36\xcc\x74\x8a\x41\x0b\x6b\xd8\x89\xa8\x02\xd0\xb2\xc0\x7d\xb8\x6e\x19\xb9\x14\xb1\x44\xa5\x02\x38\xc4\x9a\x76\xe2\x15\x8b\x74\x12\xc0\xc9\x7c\xac\x18\xf9\xc4\xd4\x25\xe3\xd8\x2f\x96\x32\x8e\x2b\x7d\x9f\x0e\x12\xe3\x15\x9b\xaa\x87\xea\xbf\x63\xf4\x6e\x5c\xec\x96\xa4\x6a\x74\x8f\x2a\x4f\x99\x1e\xd5\x85\x3c\x6e\x7a\xff\x33\xfd\x63\xbd\xa7\xd3\x41\x86\x8a\x54\xc8\x00\xec\xbf\x16\x8b\x85\xfd\xb2\xdd\x5c\x92\x0d\xa6\xfd\x2e\x11\x53\x9a\x70\x8a\x01\x9c\xf6\x84\x75\x3a\x74\x53\x5b\xc1\xf5\x8a\x7d\x36\x24\x7f\xb4\x1b\xa7\x89\xe1\xbe\xec\x98\x4d\xfc\x7c\x23\x4a\x1c\x4d\xee\xda\xf4\xb4\x31\x8d\xd9\x41\xd3\x36\x42\x46\x28\x6f\x9e\x8e\xda\x3f\x6c\xce\x7e\x1d\xa1\x26\x6c\x60\x4d\x49\xd2\x02\xcf\x39\xcb\x88\x79\x22\x63\xe2\x5a\x1f\xfe\xf6\xbb\x19\xb1\xdd\x2a\xd4\x17\xc8\x35\xca\x00\x6e\xfd\x29\xd8\x67\xfe\x91\xbd\xee\xf3\x65\x46\x74\x03\xb1\x1f\x9a\x76\xf5\x91\xdd\xca\xda\x89\xad\xd7\x56\x1d\x5a\xbd\x09\xe0\x19\xd3\x2e\x05\x89\x18\x8f\x1d\x77\x24\x8d\x4f\x2f\xdb\xe9\x3f\x75\x37\xb4\xac\xd9\x0c\xa8\xe0\x4a\x43\x22\x94\x19\x26\x15\xe3\x91\xa8\xbc\x54\xd0\x66\xab\x9e\x09\x0f\x40\x93\x93\xd3\x33\xcf\xf7\x7c\xef\x24\x98\x2f\xe6\xf3\x89\xb5\xcb\xd2\xbc\xb8\x59\xc1\x12\x38\x56\x70\x83\x9b\x95\xa0\x77\xa8\x9d\x49\xa5\x82\xd9\x6c\x72\x6c\xb8\xc7\x93\x59\xa5\x66\xad\x8e\x15\xe3\x71\x8a\x13\xd7\x6a\xa8\x9e\xe0\x19\x2a\x45\x62\x84\x25\x6c\x0b\x4e\x9b\x79\xe4\x60\xa9\xdd\xa7\xf3\xd8\xf5\x91\x48\x91\x95\x18\x7d\xc8\x54\x6c\xe6\x5f\xa9\xbd\x88\x68\x12\x5a\xcf\x30\x1f\x55\x33\xca\x5e\xaf\xae\xde\x7a\x39\x91\x0a\x9d\xe7\x2c\x37\x6c\xa0\x6f\x88\x4e\x3c\x8a\x2c\x75\x0c\xfc\xd6\x5f\xbb\xbb\x0a\x3d\x07\x13\x16\xe1\x33\x83\xc7\x20\xad\xc9\xed\xc5\xd9\xcf\xcf\xce\x41\x0f\x2f\xa9\xd1\xde\x47\xed\xd1\xcd\x55\x08\x86\x42\xa7\x9c\x64\x66\x14\x5f\x5c\xbf\xff\xf5\xe3\xe7\xe3\xb7\xef\x8f\x5f\xbf\x38\x47\xae\x5d\x0f\xca\xac\x0f\xdc\xfa\x5d\xbc\x76\xad\x3a\xfc\x1d\x00\x00\xff\xff\xd6\x81\x27\x6b\x93\x06\x00\x00")

func views_js_cpupercent_js() ([]byte, error) {
	return bindata_read(
		_views_js_cpupercent_js,
		"views/js/cpuPercent.js",
	)
}

var _views_js_disk_js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4f\x6f\xd3\x4a\x10\xbf\xef\xa7\x58\x59\x7a\x5a\x5b\xf5\xb3\xfb\xf4\x5e\xf5\x90\xa3\x70\x68\xa9\xf8\x73\x20\x15\x0d\x12\x52\xd5\xc3\x36\x9e\xd8\x5b\x9c\xdd\x65\x77\x12\x1a\x55\x3e\x20\x04\x9f\x80\x03\x12\xdc\xb8\x20\x8e\x48\x88\x13\xe2\xcb\xd0\xf6\x6b\xa0\xb5\xdd\xd8\x49\x5a\x0a\xab\x48\xd9\x9d\xf9\xfd\x66\x76\xc6\xb3\xbf\x19\x37\x34\x15\xf6\xe9\x1d\x35\xa1\x7d\x9a\xaa\xd1\x74\x02\x12\xa3\x0c\x70\xb7\x00\xb7\xdd\x9e\xdf\x4f\x7d\xe6\x20\x2c\xe8\x91\x4b\xf8\x4e\xce\x0d\xd2\x3e\x85\x91\xdb\xd8\x48\x48\x81\x7e\x13\x27\x64\x33\x21\x91\x67\xd0\x25\x0c\x34\x0a\x25\x7b\x84\xb4\x07\xda\xa7\xa7\x84\x52\x4a\x51\x60\x01\x49\x73\xa8\x0c\x70\x82\x09\x65\x17\x1f\x5e\x5c\xbc\x7b\xfb\xe3\xdb\xf7\x8b\x37\x1f\xcf\x5f\xbe\x3a\x7b\xfd\x85\x85\x0b\x8c\x9d\x1e\x35\xb0\x34\xed\x98\x0b\x18\x3b\xdb\x08\x24\x82\x61\x95\xb9\xac\xbd\xa8\x54\x81\x42\x2f\xe5\x31\x22\xcb\xc0\x24\x94\x09\x84\xc9\x12\xba\x80\x0c\x64\xda\x05\x2b\x23\x40\xba\xd8\x33\x30\x28\x46\xbc\x58\xcf\xea\xfe\x1a\x6b\x13\xc6\x82\x11\x60\x13\x7a\xb0\x80\xb6\x01\xdd\x92\x7c\x02\x09\x65\xd7\xd4\x58\xdd\x71\xae\x1d\x42\x0b\x58\x71\x18\x9e\x8a\xa9\x4d\x28\xdb\xda\xfc\x6b\xc5\x95\x72\xe4\xdd\x9c\x8b\xdc\x33\x5e\x4c\x21\xa1\xff\x6c\xfe\x77\x2b\xbc\xcc\x7d\xf6\xf5\x73\x9d\x9e\x95\xe1\xb5\x8c\xff\xff\xdd\x5a\x10\xce\xdf\x7f\xba\x9a\x70\xb8\x7c\x84\x89\xce\xb9\x15\x36\x59\xa9\xd9\x2d\xd7\xef\x7d\x9c\x2f\x7f\xf6\xee\xb2\x39\x4f\xd5\xf3\xed\x62\x6a\xdc\x75\xd7\x2f\xd6\x62\x06\xe3\xb1\x05\x7c\x92\xd0\x5f\xa2\x76\x54\xa1\xdc\x87\x36\xd9\x11\xf7\x37\x43\xda\xfc\xa2\xad\x80\xad\xb1\x4a\x72\xf5\xa9\xde\x1d\x92\xb2\x19\xe3\xea\x11\x44\x16\xb0\x9e\x67\xbf\x1d\xed\xa0\x47\x48\x1c\xd3\x91\x92\x16\xab\xf1\x7f\x6c\x0a\xda\xa7\x5e\x8e\xa8\x93\x38\xf6\x36\x72\x65\x71\xc3\x8b\xb9\x16\xb1\x73\x7b\x3d\x07\x77\xde\x48\x69\x90\xbe\x77\x77\x77\xe8\x85\x0d\x31\x58\xf8\x2c\xc8\xd4\x6f\x8f\x4a\x1a\xe0\xe9\xdc\x22\x47\xf7\x0e\x65\x06\x7d\x1f\x82\xfe\xed\x53\x87\x70\xab\xce\x7f\x6c\xab\xb7\xf6\x60\x7f\xf0\x30\xd2\xdc\x58\xf0\x2b\xb6\x01\xab\x95\xb4\x30\x84\x13\x0c\xba\x0c\x55\x40\x54\xa8\xcc\x77\xbc\xca\x51\x12\xd2\xa9\xc4\xc2\x0d\xc5\xec\x71\xcc\xbd\x1e\xe9\x54\xb3\x37\xd8\x1f\x7a\x61\x87\x1e\x34\x6e\x0b\xf8\x08\x9e\x4d\xc1\xe2\x3d\xe0\x29\x18\x9f\xed\x28\x89\x20\xf1\xef\xe1\x5c\x03\x0b\x29\xe3\x5a\x17\x62\xc4\x5d\x53\x63\x77\xa1\xae\xa6\xb8\x44\x4e\x44\x34\xc7\x3c\x61\x71\xae\x26\xc0\x4a\x72\x43\x6b\x68\xf5\x5c\x91\x1e\xf7\x97\xba\xd0\xda\xd7\xba\x75\x1c\x90\xd5\xd6\x2c\x51\xd7\xdd\x2e\x46\x84\x0a\x79\x51\xfb\xae\x1a\x96\x8e\x0a\xad\xca\x1f\x5d\x92\xb7\x5a\x05\x13\xca\x36\xaa\xb0\xae\xd8\x76\x22\x3b\x7a\x58\x2b\xcd\xc1\xe9\xba\x12\x5c\x2f\x04\x55\xc4\xa9\x85\xf4\xcf\xd4\xa0\xa2\x8d\x0d\xc0\x6f\x68\x42\x7b\xd7\x7a\x5b\x06\x3d\x52\x92\x76\x9c\xab\x46\x5b\x34\x42\x66\x62\x3c\xf7\x2f\xbf\x6b\x10\xfc\x0c\x00\x00\xff\xff\x22\x2d\x7d\xc7\x9a\x06\x00\x00")

func views_js_disk_js() ([]byte, error) {
	return bindata_read(
		_views_js_disk_js,
		"views/js/disk.js",
	)
}

var _views_js_mempercent_js = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xcf\x6a\xdb\x4e\x10\xbe\xeb\x29\x06\xff\x08\x2b\x11\x61\xfb\x17\x5a\xda\x48\xf8\x90\xa6\x3d\x14\x02\x2d\xb8\x90\x43\x30\x65\x2d\x8d\xa5\x25\xd2\xae\xd9\x1d\xcb\x75\x8d\x8e\x6d\x6f\x3d\xf5\xd0\x47\xe8\xa5\x8f\x50\xfa\x32\x0d\x79\x8d\xb2\xb2\xb1\xa2\x3f\x86\xd4\xa7\xf5\xcc\x7c\xf3\x7d\xf3\xad\x76\x0a\xae\x21\xc7\xfc\x2d\xea\x08\x25\xbd\x54\x39\x4c\x20\x56\xd1\x2a\x47\x49\xc3\x04\xe9\x55\x86\xf6\xf8\x62\xf3\x3a\x76\x59\x5d\xc8\xbc\xd0\x69\x42\x2f\x53\xae\x09\x26\x80\x91\x3d\x98\xa1\x90\x82\xdc\x46\x67\x9f\x15\x42\x12\x4f\xb0\x0b\x7e\xb3\x24\xa1\x64\xe8\x38\xed\x10\x4c\x60\xeb\x38\x00\x00\x06\xb5\x40\x13\xc0\xcd\xb6\xfa\x6b\x7f\xb4\x59\x62\x00\x2c\xe1\xab\x04\x99\x5f\x87\x05\x65\x18\xd4\x65\x15\x3a\x55\xeb\x00\x48\xaf\xf0\x10\x2e\x6b\xc4\x52\xab\x44\xa3\x31\x01\x1c\x43\xf9\x8d\xf8\x5a\xc4\x94\x06\xf0\xff\xf3\xbe\x66\xfc\x83\x30\x57\x42\x62\xbb\x59\x26\x24\x4e\x69\x93\x75\x12\xfd\x1d\xab\xae\xc7\xfa\xbf\x13\xd1\x6d\xbf\xd8\x05\xcf\x4c\xef\x8c\x66\x99\x09\xea\xd5\x85\x32\xa9\xb8\x9f\xfa\xff\xac\xf7\xcc\xef\x64\x22\x95\x29\x1d\x00\xfb\xef\xfc\xfc\x9c\x3d\x6e\x9a\x2b\x3e\xc7\xac\xcd\x12\x0b\x43\x5c\x46\x18\xc0\x59\x4b\x58\x83\xa1\x99\x5a\x28\x49\x53\xf1\xd1\x82\xc6\xbd\x6c\x32\x4a\x2d\xf6\x71\xd7\x6c\xe3\x17\x73\x55\x60\x6f\x72\x47\xd3\xd2\x26\x08\xf3\xa3\xa6\xcd\x95\x8e\x51\x5f\xef\xaf\x7a\x7c\xdc\x9c\xc3\x39\x46\xe2\xa2\x63\x4d\xc1\xb3\x15\x5e\x48\x91\x73\xfb\x44\xfa\xc4\xd5\x3e\x3c\x19\x37\x33\x6a\xb1\x30\x48\x97\x28\x09\x75\x00\x37\x63\x1f\xd8\xb3\xf1\x09\x9b\xb5\xf1\x3a\xe7\x54\x95\xb0\x6d\x45\x57\x9e\xb0\x5a\xd6\x4e\x6c\x39\x73\xca\xd0\x69\x6d\x80\xa1\x35\xed\x4a\xf1\x58\xc8\xc4\xf5\x7a\xd2\xb8\x7f\xd9\x6e\xfb\xa9\x7b\xa1\xe3\x44\x4a\x1a\xb2\x7b\xe1\x7a\x0a\x13\x90\xb8\x86\x6b\x9c\x4f\x55\x74\x8b\xe4\x0e\xd6\x26\x18\x8d\x06\xa7\xa9\x32\x74\x3a\x18\xad\xcd\xa8\xee\x30\xf0\x9c\x0a\x34\x54\x32\x47\x63\x78\x82\x30\x81\xc5\x4a\x46\xd5\x0e\x71\xb1\x20\x6f\xef\xe1\x8e\x41\x63\x84\xa2\xc0\xf8\x7d\x6e\x12\xbb\xb3\x0a\x1a\xc6\x9c\x78\x58\x95\xb4\x25\xa7\x22\xc6\x07\x13\xf5\x95\xd4\x53\xd5\x37\x75\x58\x58\x0d\x67\xbb\x5f\x85\x25\x6e\x57\x1d\xaa\x2b\xef\x83\x87\x72\x7d\xc9\x73\xbb\xf5\xee\x3e\x7f\xba\xfb\xf9\xfd\xcf\xaf\xdf\xf7\xdf\x7e\xdc\x7f\xfd\xe2\x9e\x78\xac\xec\xf4\x98\x1d\xf9\xc6\x76\xf1\xd2\x73\xca\xf0\x6f\x00\x00\x00\xff\xff\x6b\x71\xd7\x96\x01\x06\x00\x00")

func views_js_mempercent_js() ([]byte, error) {
	return bindata_read(
		_views_js_mempercent_js,
		"views/js/memPercent.js",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"views/archive/MemAndCpuPercent.html": views_archive_memandcpupercent_html,
	"views/index.html": views_index_html,
	"views/js/cpuPercent.js": views_js_cpupercent_js,
	"views/js/disk.js": views_js_disk_js,
	"views/js/memPercent.js": views_js_mempercent_js,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"views": &_bintree_t{nil, map[string]*_bintree_t{
		"archive": &_bintree_t{nil, map[string]*_bintree_t{
			"MemAndCpuPercent.html": &_bintree_t{views_archive_memandcpupercent_html, map[string]*_bintree_t{
			}},
		}},
		"index.html": &_bintree_t{views_index_html, map[string]*_bintree_t{
		}},
		"js": &_bintree_t{nil, map[string]*_bintree_t{
			"cpuPercent.js": &_bintree_t{views_js_cpupercent_js, map[string]*_bintree_t{
			}},
			"disk.js": &_bintree_t{views_js_disk_js, map[string]*_bintree_t{
			}},
			"memPercent.js": &_bintree_t{views_js_mempercent_js, map[string]*_bintree_t{
			}},
		}},
	}},
}}
